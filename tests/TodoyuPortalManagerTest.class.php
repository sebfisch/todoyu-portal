<?php

/**
 * Test class for TodoyuPortalManager.
 * Generated by PHPUnit on 2010-03-12 at 16:38:16.
 */
class TodoyuPortalManagerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var TodoyuPortalManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TodoyuPortalManager;
    }



    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }



    /**
     *
     */
	public function testAddTab() {
		$tabKey	= 'selection';
		TodoyuPortalManager::addTab('selection', 'TodoyuPortalRenderer::getSelectionTabLabel', 'TodoyuPortalRenderer::renderSelectionTabContent', 10, array('portal/public'));

		$tabConfig	= $GLOBALS['CONFIG']['EXT']['portal']['tabs'][$tabKey];

		$this->assertType( 'array', $tabConfig );
		$this->assertGreaterThan( 0, sizeof($tabConfig) );

		$this->assertArrayHasKey( 'key', $tabConfig );

		$this->assertArrayHasKey( 'labelFunc', $tabConfig );
		$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['labelFunc']), 'tab \'' . $tabKey . '\' labelFunc function reference validated');

		$this->assertArrayHasKey( 'contentFunc', $tabConfig, 'tab ' . $index . ' has \'' . $tabKey . '\' contentFunc' );
		$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['contentFunc']), 'tab \'' . $tabKey . '\' contentFunc function reference validated');

		$this->assertArrayHasKey( 'assets', $tabConfig);
		$this->assertType( 'array', $tabConfig['assets'] );
		$this->assertGreaterThan( 0, $tabConfig['assets'] );
    }



    /**
     *
     */
    public function testGetTabsConfig() {
		$tabsConfig	= $this->object->getTabsConfig();

			// General check of returned config array
		$this->assertType('array', $tabsConfig);
		$this->assertGreaterThan( 0, sizeof($tabsConfig) );

			// Check all tab configs
		foreach($tabsConfig as $index => $tabConfig) {
			$key	= $tabConfig['key'];

			$this->assertArrayHasKey( 'key', $tabConfig );

			$this->assertArrayHasKey( 'labelFunc', $tabConfig );
			$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['labelFunc']), 'tab ' . $index . ' (' . $key . ') labelFunc function reference validated');

			$this->assertArrayHasKey( 'contentFunc', $tabConfig );
			$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['contentFunc']), 'tab ' . $index . ' (' . $key . ')  contentFunc function reference validated');

			$this->assertArrayHasKey( 'assets', $tabConfig );
			$this->assertType( 'array', $tabConfig['assets'] );
			$this->assertGreaterThan( 0, sizeof($tabConfig['assets']) );
		}
    }



    /**
     *
     */
    public function testGetTabConfig() {
		$tabKeys	= array('selection', 'todo', 'feedback', 'appointment');
		foreach($tabKeys as $tabKey) {
			$tabConfig	= $this->object->getTabConfig($tabKey);

			$this->assertType('array', $tabConfig);
			$this->assertGreaterThan( 0, sizeof($tabConfig) );

			$this->assertArrayHasKey( 'key', $tabConfig );

			$this->assertArrayHasKey( 'labelFunc', $tabConfig );
			$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['labelFunc']), 'tab \'' . $tabKey . '\' labelFunc function reference validated');

			$this->assertArrayHasKey( 'contentFunc', $tabConfig );
			$this->assertTrue( TodoyuDiv::isFunctionReference($tabConfig['contentFunc']), 'tab \'' . $tabKey . '\' contentFunc function reference validated');

			$this->assertArrayHasKey( 'assets', $tabConfig, 'tab \'' . $tabKey . '\' has assets' );
			$this->assertType('array', $tabConfig['assets']);
			$this->assertGreaterThan( 0, $tabConfig['assets'] );
		}
    }



    /**
     * @todo Implement testGetTabs().
     */
    public function testGetTabs()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }



    /**
     * @todo Implement testGetTaskContextMenuItems().
     */
    public function testGetTaskContextMenuItems()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetSelectionCount().
     */
    public function testGetSelectionCount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }



    /**
     * @todo Implement testGetSelectionType().
     */
    public function testGetSelectionType()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddTabAssetsToPage().
     */
    public function testAddTabAssetsToPage()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

}
?>
